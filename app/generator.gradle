// Usage:
// ./gradlew app:screen -Ppackage=com.mycompany.myapp -Pscreen=Login

import com.github.mustachejava.DefaultMustacheFactory
import com.google.common.base.CaseFormat

import java.util.regex.Matcher

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.1'
        classpath 'com.google.guava:guava:19.0'
    }
}

task screen << {
    String argPackage = getProject().getProperty('package')
    String argPackageDirs = argPackage.replaceAll("\\.", Matcher.quoteReplacement(File.separator));

    String argScreen = getProject().getProperty('screen')
    String screenPackage = argScreen.toLowerCase()
    String screenName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, argScreen)
    String screenFileName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, argScreen)

    HashMap<String, Object> scopes = new HashMap<String, Object>()
    scopes.put('package', argPackage)
    scopes.put('screenLowerCase', screenPackage)
    scopes.put('screenUpperCamel', argScreen)
    scopes.put('screenLowerCamel', screenName)
    scopes.put('screenUnderscore', screenFileName)

    // New files
    createFile(scopes, 'templates/screen/Activity.java.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Activity.java")
    createFile(scopes, 'templates/screen/Fragment.java.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Fragment.java")
    createFile(scopes, 'templates/screen/Component.java.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Component.java")
    createFile(scopes, 'templates/screen/Presenter.java.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Presenter.java")

    createFile(scopes, 'templates/screen/activity.xml.mustache', "src/main/res/layout/activity_${screenFileName}.xml")
    createFile(scopes, 'templates/screen/content.xml.mustache', "src/main/res/layout/content_${screenFileName}.xml")
    createFile(scopes, 'templates/screen/fragment.xml.mustache', "src/main/res/layout/fragment_${screenFileName}.xml")

    createFile(scopes, 'templates/screen/ActivityTests.java.mustache', "src/androidTest/java/$argPackageDirs/ui/$screenPackage/${argScreen}ActivityEspressoTests.java")
    createFile(scopes, 'templates/screen/PresenterTests.java.mustache', "src/test/java/$argPackageDirs/ui/$screenPackage/${argScreen}PresenterTests.java")

    // Existing files
    updateFile(
            scopes,
            'templates/screen/ApplicationComponent_ImportPartial.java.mustache',
            "src/main/java/$argPackageDirs/app/ApplicationComponent.java",
            "// GENERATOR - MORE IMPORTS //")
    updateFile(
            scopes,
            'templates/screen/ApplicationComponent_SubcomponentPartial.java.mustache',
            "src/main/java/$argPackageDirs/app/ApplicationComponent.java",
            "// GENERATOR - MORE SUBCOMPONENTS //")
    updateFile(
            scopes,
            'templates/screen/AndroidManifest_ActivityPartial.xml.mustache',
            "src/main/AndroidManifest.xml",
            "<!-- GENERATOR - MORE ACTIVITIES -->")
}

task ktscreen << {
    String argPackage = getProject().getProperty('package')
    String argPackageDirs = argPackage.replaceAll("\\.", Matcher.quoteReplacement(File.separator));

    String argScreen = getProject().getProperty('screen')
    String screenPackage = argScreen.toLowerCase()
    String screenName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_CAMEL, argScreen)
    String screenFileName = CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, argScreen)

    HashMap<String, Object> scopes = new HashMap<String, Object>()
    scopes.put('package', argPackage)
    scopes.put('screenLowerCase', screenPackage)
    scopes.put('screenUpperCamel', argScreen)
    scopes.put('screenLowerCamel', screenName)
    scopes.put('screenUnderscore', screenFileName)

    // New files
    createFile(scopes, 'templates/screen/Activity.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Activity.kt")
    createFile(scopes, 'templates/screen/Fragment.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Fragment.kt")
    createFile(scopes, 'templates/screen/Component.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Component.kt")
    createFile(scopes, 'templates/screen/Presenter.kt.mustache', "src/main/java/$argPackageDirs/ui/$screenPackage/${argScreen}Presenter.kt")

    createFile(scopes, 'templates/screen/activity.xml.mustache', "src/main/res/layout/activity_${screenFileName}.xml")
    createFile(scopes, 'templates/screen/content.xml.mustache', "src/main/res/layout/content_${screenFileName}.xml")
    createFile(scopes, 'templates/screen/fragment.xml.mustache', "src/main/res/layout/fragment_${screenFileName}.xml")

    createFile(scopes, 'templates/screen/ActivityTests.kt.mustache', "src/androidTest/java/$argPackageDirs/ui/$screenPackage/${argScreen}ActivityEspressoTests.kt")
    createFile(scopes, 'templates/screen/PresenterTests.kt.mustache', "src/test/java/$argPackageDirs/ui/$screenPackage/${argScreen}PresenterTests.kt")

    // Existing files
    updateFile(
            scopes,
            'templates/screen/ApplicationComponent_ImportPartial.java.mustache',
            "src/main/java/$argPackageDirs/app/ApplicationComponent.java",
            "// GENERATOR - MORE IMPORTS //")
    updateFile(
            scopes,
            'templates/screen/ApplicationComponent_SubcomponentPartial.java.mustache',
            "src/main/java/$argPackageDirs/app/ApplicationComponent.java",
            "// GENERATOR - MORE SUBCOMPONENTS //")
    updateFile(
            scopes,
            'templates/screen/AndroidManifest_ActivityPartial.xml.mustache',
            "src/main/AndroidManifest.xml",
            "<!-- GENERATOR - MORE ACTIVITIES -->")
}

void createFile(scopes, String templateFile, String outputFile) {
    String template = file(templateFile).text

    File output = new File(getProjectDir(), outputFile)
    output.getParentFile().mkdirs()

    Writer writer = new FileWriter(output)
    def mf = new DefaultMustacheFactory()
    def mustache = mf.compile(new StringReader(template), 'generator')
    mustache.execute(writer, scopes)
    writer.flush()
}

void updateFile(scopes, String templateFile, String updateFile, String replacement) {
    String template = file(templateFile).text

    Writer writer = new StringWriter()
    def mf = new DefaultMustacheFactory()
    def mustache = mf.compile(new StringReader(template), 'generator')
    mustache.execute(writer, scopes)
    writer.flush()

    File output = new File(getProjectDir(), updateFile)
    String outputContents = output.text

    outputContents = outputContents.replace(replacement, writer.toString())

    Writer fileWriter = new FileWriter(output)
    fileWriter.write(outputContents);
    fileWriter.flush()
}
