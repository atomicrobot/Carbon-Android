buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}


allprojects {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://jitpack.io" }
    }

    // Automatically pull down javadocs and sources (if available)
    apply plugin: 'idea'
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    // Verbose output for usage of deprecated APIs
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }
}

// Disable predexing (enable on build servers)
project.ext.preDexLibs = !project.hasProperty('disablePreDex')
subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ("com.android.build.gradle.AppPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        } else if ("com.android.build.gradle.LibraryPlugin".equals(plugin.class.name)) {
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }
}

// Prevent wildcard dependencies
// https://gist.github.com/JakeWharton/2066f5e4f08fbaaa68fd
allprojects {
    afterEvaluate { project ->
        project.configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                def requested = details.requested
                if (requested.version.contains('+')) {
                    throw new GradleException("Wildcard dependency forbidden: ${requested.group}:${requested.name}:${requested.version}")
                }
            }
        }
    }
}

ext {
    // Build (this implementation assumes values are being provided as arguments, perhaps by a build server)
    appVersion = "1.0"
    versionFingerprint = project.hasProperty("fingerprint") ? ("\"" + fingerprint + "\"") : "\"DEV\""
    versionCode = project.hasProperty("buildNumber") ? Integer.parseInt(buildNumber) : 1
    versionName = "$appVersion b$versionCode"

    // Build settings that are likely to be reused across different modules
    buildToolsVersion = "23.0.2"
    minSdkVersion = 16
    targetSdkVersion = 23
    compileSdkVersion = 23

    // Libraries are are likely to be reused across different modules
    supportVersion = '23.3.0'
    libraryAndroidSupport = "com.android.support:support-v4:$supportVersion"
    libraryAndroidAppCompat = "com.android.support:appcompat-v7:$supportVersion"
    libraryAndroidRecyclerView = "com.android.support:recyclerview-v7:$supportVersion"
    libraryAndroidCardView = "com.android.support:cardview-v7:$supportVersion"
    libraryAndroidSupportAnnotations = "com.android.support:support-annotations:$supportVersion"
    libraryAndroidDesignSupport = "com.android.support:design:$supportVersion"

    playServicesVersion = '8.4.0'
    libraryGooglePlayServices = "com.google.android.gms:play-services-base:$playServicesVersion"
}

evaluationDependsOnChildren();

task initialCleanup() {
    def cleanTasks = getProjectTask(this, 'clean')
    def uninstallTasks = getProjectTask(this, 'uninstallAll')

    dependsOn cleanTasks
    dependsOn uninstallTasks
}

task staticAnalysis {
    def appProject = subprojects.find { project -> 'app' == project.name }

    def findBugsTasks = getProjectTask(appProject, 'findbugs')
    def pmdTasks = getProjectTask(appProject, 'pmd')
    def lintTasks = getProjectTask(appProject, 'lint')

    dependsOn findBugsTasks
    dependsOn pmdTasks
    dependsOn lintTasks
}

task testing() {
    def appProject = subprojects.find { project -> 'app' == project.name }

    def unitTestTasks = getProjectTask(appProject, 'testDevDebugUnitTest')
    def integrationTestTasks = getProjectTask(appProject, 'spoonDevDebugAndroidTest')

    dependsOn unitTestTasks
    dependsOn integrationTestTasks

    integrationTestTasks.each { task -> task.mustRunAfter unitTestTasks }
}

task release() {
    def appProject = subprojects.find { project -> 'app' == project.name }

    def appTasks = getProjectTask(appProject, 'assembleRelease')

    dependsOn appTasks
}

def getProjectTask(project, taskName) {
    def tasks = project.getTasksByName(taskName, true)
    if (tasks == null || tasks.empty) {
        throw new IllegalArgumentException("Task " + taskName + " not found")
    }
    return tasks
}

task continuousIntegration() {
    dependsOn initialCleanup
    dependsOn staticAnalysis
    dependsOn testing
    dependsOn release

    // Static analysis first, then testing, then release
    staticAnalysis.mustRunAfter initialCleanup
    testing.mustRunAfter staticAnalysis
    release.mustRunAfter testing
}